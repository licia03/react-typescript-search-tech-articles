{"version":3,"sources":["components/useDataApi.tsx","components/articleList/ArticleList.tsx","components/form/Form.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["initialData","reducer","state","action","type","isLoading","isError","data","payload","Error","useDataApi","useState","url","setUrl","useReducer","dispatch","useEffect","didCancel","a","async","axios","result","fetchData","ArticleList","hits","map","hit","className","key","objectID","title","author","href","target","rel","Form","onSubmit","searchInput","useRef","e","preventDefault","current","value","placeholder","aria-label","aria-describedby","ref","id","App","inputValue","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iUAmCMA,EAAc,GAcdC,EAAU,SAACC,EAAkBC,GAC/B,OAAOA,EAAOC,MACV,IAAK,iBACD,OAAO,eAAIF,EAAX,CAAkBG,WAAW,EAAMC,SAAS,IAEhD,IAAK,gBACD,OAAO,eAAIJ,EAAX,CAAkBG,WAAW,EAAOE,KAAMJ,EAAOK,UAErD,IAAK,cACD,OAAO,eAAIN,EAAX,CAAkBG,WAAW,EAAOC,SAAS,IAEjD,QACI,MAAM,IAAIG,QAKPC,EA/DI,WAAO,IAAD,EACCC,mBAAS,IADV,mBACdC,EADc,KACTC,EADS,OAG0BC,qBAAWb,EAAS,CAACI,WAAW,EAAOC,SAAS,EAAOC,KAAMP,IAHvF,0BAGbK,EAHa,EAGbA,UAAWC,EAHE,EAGFA,QAASC,EAHP,EAGOA,KAAOQ,EAHd,KA6BrB,OAxBAC,qBAAU,WACN,IAAIC,GAAY,EAChBF,EAAS,CAACX,KAAM,mBAgBhB,OAdkB,mBAAAc,EAAAC,OAAA,2EAAAD,EAAA,MAEOE,IAAMR,IAFb,OAERS,EAFQ,OAGTJ,GACDF,EAAS,CAACX,KAAM,gBAAiBI,QAASa,EAAOd,OAJvC,mDAOTU,EAPS,uBAQVF,EAAS,CAACX,KAAM,gBACV,IAAIK,MATA,wDAalBa,GACO,WACLL,GAAY,KAGf,CAACL,IAEG,CAACP,YAAWC,UAASO,SAAQN,SCAzBgB,G,MAhB+B,SAAC,GAAY,IAAXhB,EAAU,EAAVA,KAC5C,OAAIA,GAAQA,EAAKiB,KACLjB,EAAKiB,KAAKC,KAAI,SAACC,GAAD,OAClB,yBAAKC,UAAU,WAAWC,IAAKF,EAAIG,UACnC,yBAAKF,UAAU,QACX,yBAAKA,UAAU,aACf,wBAAIA,UAAU,cAAcD,EAAII,OAChC,wBAAIH,UAAU,iCAAd,WAAuDD,EAAIK,QAC3D,uBAAGC,KAAMN,EAAId,IAAKe,UAAU,kBAAkBM,OAAO,SAASC,IAAI,uBAAlE,sBAKE,OCEHC,EAzBmB,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAC1BC,EAAcC,iBAAgC,MAOpD,OACI,0BAAMF,SANY,SAACG,GACnBA,EAAEC,iBACFJ,EAASC,EAAYI,QAASC,SAK1B,yBAAKf,UAAU,oBACf,2BAAOvB,KAAK,OACRuB,UAAU,eACVgB,YAAY,kBACZC,aAAW,kBACXC,mBAAiB,gBACjBC,IAAKT,IACT,yBAAKV,UAAU,sBACX,4BAAQA,UAAU,kBAAkBvB,KAAK,SAAS2C,GAAG,iBAArD,cCGDC,G,MApBO,WAAO,IAAD,EACiBtC,IAApCH,EADmB,EACnBA,KAAMF,EADa,EACbA,UAAWC,EADE,EACFA,QAASO,EADP,EACOA,OAMjC,OACE,yBAAKc,UAAU,oEACb,6CACA,kBAAC,EAAD,CAAMS,SAPY,SAACa,GACrBpC,EAAO,8CAAD,OAA+CoC,OAOlD3C,GAAW,sDACXD,EACE,6CACD,kBAAC,EAAD,CAAaE,KAAMA,OCTP2C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDoI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.7a79878d.chunk.js","sourcesContent":["import { useState, useEffect, useReducer } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst useDataApi = () => {\r\n    const [url, setUrl] = useState('');\r\n\r\n    const [{isLoading, isError, data}, dispatch] = useReducer(reducer, {isLoading: false, isError: false, data: initialData});\r\n\r\n    useEffect(() => {\r\n        let didCancel = false;\r\n        dispatch({type: \"FETCH_PROGRESS\"});\r\n    \r\n        const fetchData = async() => {\r\n          try {\r\n            const result = await axios(url);\r\n            if (!didCancel) {\r\n                dispatch({type: \"FETCH_SUCCESS\", payload: result.data});\r\n            }\r\n          } catch {\r\n            if (!didCancel) {\r\n                dispatch({type: \"FETCH_ERROR\"});\r\n                throw new Error();\r\n            }\r\n          }\r\n        }\r\n        fetchData();\r\n        return () => {\r\n          didCancel = true;\r\n        }\r\n    \r\n    }, [url]);\r\n\r\n    return {isLoading, isError, setUrl, data};\r\n};\r\n\r\nconst initialData = {};\r\ntype DataType = {\r\n    hits: {title: string, url: string, author: string}[]\r\n}\r\ntype StateType = {\r\n    isLoading: boolean;\r\n    isError: boolean;\r\n    data: DataType | any;\r\n};\r\ntype ActionType = \r\n    | {type: 'FETCH_PROGRESS'}\r\n    | {type: 'FETCH_SUCCESS', payload: {}}\r\n    | {type: 'FETCH_ERROR'}\r\n\r\nconst reducer = (state: StateType, action: ActionType) => {\r\n    switch(action.type) {\r\n        case 'FETCH_PROGRESS': {\r\n            return {...state, isLoading: true, isError: false};\r\n        }\r\n        case 'FETCH_SUCCESS': {\r\n            return {...state, isLoading: false, data: action.payload};\r\n        }\r\n        case 'FETCH_ERROR': {\r\n            return {...state, isLoading: false, isError: true};\r\n        }\r\n        default: {\r\n            throw new Error();\r\n        }\r\n    }\r\n};\r\n\r\nexport default useDataApi;","import React from 'react';\r\nimport './ArticleList.scss';\r\n\r\ninterface Data {\r\n    url: string | undefined; \r\n    title: string; \r\n    author: string;\r\n    objectID: string;\r\n};\r\n\r\ninterface ListData {\r\n    data: {\r\n        hits: Array<Data>\r\n    };\r\n}\r\n\r\nconst ArticleList: React.FC<ListData | any> = ({data}) => {\r\n    if (data && data.hits) {\r\n        return (data.hits.map((hit: Data) => \r\n            <div className=\"col-sm-6\" key={hit.objectID}>\r\n            <div className=\"card\">\r\n                <div className=\"card-body\">\r\n                <h5 className=\"card-title\">{hit.title}</h5>\r\n                <h6 className=\"card-subtitle mb-2 text-muted\">Author: {hit.author}</h6>\r\n                <a href={hit.url} className=\"btn btn-primary\" target=\"_blank\" rel=\"noopener noreferrer\">Read article</a>\r\n                </div>\r\n            </div>\r\n            </div>\r\n        ));\r\n    } else return null;\r\n};\r\n\r\nexport default ArticleList;","import React, { useRef } from 'react';\r\n\r\ninterface PropsType {\r\n    onSubmit: (value: string) => void;\r\n};\r\n\r\nconst Form: React.FC<PropsType> = ({onSubmit}) => {\r\n    const searchInput = useRef<HTMLInputElement | null>(null);\r\n\r\n    const submitHandler = (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n        onSubmit(searchInput.current!.value);\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={submitHandler}>\r\n            <div className=\"input-group mb-3\">\r\n            <input type=\"text\" \r\n                className=\"form-control\" \r\n                placeholder=\"Search articles\" \r\n                aria-label=\"Search articles\" \r\n                aria-describedby=\"button-search\"\r\n                ref={searchInput} />\r\n            <div className=\"input-group-append\">\r\n                <button className=\"btn btn-primary\" type=\"submit\" id=\"button-search\">SEARCH</button>\r\n            </div>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default Form;","import React, { useRef } from 'react';\nimport logo from './logo.svg';\nimport useDataApi from './components/useDataApi';\nimport ArticleList from './components/articleList/ArticleList';\nimport Form from './components/form/Form';\nimport './App.scss';\n\nconst App: React.FC = () => {\n  const {data, isLoading, isError, setUrl} = useDataApi();\n\n  const submitHandler = (inputValue: string) => {\n    setUrl(`https://hn.algolia.com/api/v1/search?query=${inputValue}`);\n  };\n\n  return (\n    <div className=\"App d-flex justify-content-center flex-column align-items-center\">\n      <h1>Tech articles</h1>\n      <Form onSubmit={submitHandler} />\n      {isError && <div>Something went wrong!</div>}\n      {isLoading ? \n        (<div>Loading.....</div>) : \n        <ArticleList data={data} />\n      }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport './custom.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}